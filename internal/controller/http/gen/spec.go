// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX227bRhD9FWKahwQgLUp2bIdvubSF0aYx4vbBcFxjTY5kBrx5uQwiuARiB00eGiB9",
	"LtAWRX9AuRhRrFr5heEfFbuULVGibMmXug95SYTd9eyZOWfOLHfADv0oDDAQMVg7ENtb6DP183ajwbHB",
	"hBsGDzFOPCEXIx5GyIWL6ogIBfM27DBWe/iU+ZGHYFVrpqmD7waun/hgmTqIZoRggRsIbCCHNNWB43bi",
	"cnTAWhuMs358ONx8jLaAVIe7HJnAlWQztrkb5YC2E4xLEGHgbDhMYAEPVGtGzazdBB2CxPPYplwUPEEd",
	"IiYE8gAs+PG6uVY1bq3/VF0zjdr6DaNmPnrk7NTSa3AMKRbcDRoSUsRdu3jJ3Gk56xAjf+LauBEwfwjg",
	"KgscfKote0lcdlssGBcleZkLR3mdNY8kRr7hOsWw8+a8Wa0jGrXNetWYW6hVDYbzdWNhfnYeF24x095k",
	"oEM95D4TYEGSuM5o8CGOC8kfFbAPoJBkmQgG6b863vNSDWfOkTkPAq95FP2zXM4tl1wS59TMD5FzFuO4",
	"PJO4eR7W82wcbSU/MRXzi+djfrJePpENGcMN6qEE5uBAK8PDL1e+N7Jd2s+e0VtqZ7savadO9lqjFr3L",
	"ntE+vaNW9oLa1JY7LTqkw+yX7GeNuvRG/nNIHWrRRzo06BN16T19klHogFrykFzqZK/oA3XpLbWyPdqn",
	"Du3TR5mmK1R9BiVyVF/t9vIS6PAEeZzjrM6YM6aschhhwCIXLJidMWdm86puKRlV4oFIaqWBSm1Sa2qW",
	"LjlgwdcoVgoHZQjOfBTIY7DWdsCVN24nyJvSvZQWBnWvxvTltGH53UOUlwE40ZXGxu1rpjxq37QmjHjc",
	"yeXx+jNhON66FHkchUGcW0LNNOV/dhgIDBSJLIo811Y0Vh7H+Rzq3+EK9NUfXuNYBwu+qPTfVpXew6pS",
	"GGPpMQjGOWvmTVJsjgffqO6LE99nvAkW0F89eXfpQCvovUsHynV6z7Gi4pbDeERyPDfDO6HTnCrRk/Ib",
	"/1ZLiy4irTUdqXj1woAUCz1a2ByoIys2lxNd3L/DHK0PfYiBLn2QTpTtZa+KHBxkz9Xpog9UYmn3E3rB",
	"SuKP2kERG/1OrewltahDXXm/dM62QtHSrt+/b6yurq7eAP30hivSMdgwZ50TI1B/Uwa9n72YFuhAH18G",
	"zEkN9qL98qJd56QeGP2EG+Mw0/fAr8XRnL3Wst1sj7rUpn+oq363S+xptDV2XCfNb/Ywf7YU2+OeWi90",
	"yJIzZl7KMdynoPc0Hyed04gdJWZutELfhdrdHlOqiKVHhPZVmATOcAn/Vo+ZDrXH2Ig+mV9cVTXM/8yq",
	"jxQ6TXH/VK++59nLMeVVC9rSPTUxk7KBmVxZmS9+Ko//EJpoKv+/qf6D3tChetyP66S0911VPk2/DW3m",
	"afm+/LrkHliwJURkVSqe3NsKY2EtmosmpOvpvwEAAP//AoQ3KjITAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

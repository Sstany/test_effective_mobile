// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"
	entity "subscription-service/internal/app/entity"
	port "subscription-service/internal/port"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionController is a mock of TransactionController interface.
type MockTransactionController struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionControllerMockRecorder
}

// MockTransactionControllerMockRecorder is the mock recorder for MockTransactionController.
type MockTransactionControllerMockRecorder struct {
	mock *MockTransactionController
}

// NewMockTransactionController creates a new mock instance.
func NewMockTransactionController(ctrl *gomock.Controller) *MockTransactionController {
	mock := &MockTransactionController{ctrl: ctrl}
	mock.recorder = &MockTransactionControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionController) EXPECT() *MockTransactionControllerMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockTransactionController) BeginTx(ctx context.Context, isoLvl entity.IsolationLevel) (port.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, isoLvl)
	ret0, _ := ret[0].(port.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTransactionControllerMockRecorder) BeginTx(ctx, isoLvl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTransactionController)(nil).BeginTx), ctx, isoLvl)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
}

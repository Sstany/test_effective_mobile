// Code generated by MockGen. DO NOT EDIT.
// Source: ./subscription.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"
	entity "subscrioption-service/internal/app/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionRepo is a mock of SubscriptionRepo interface.
type MockSubscriptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepoMockRecorder
}

// MockSubscriptionRepoMockRecorder is the mock recorder for MockSubscriptionRepo.
type MockSubscriptionRepoMockRecorder struct {
	mock *MockSubscriptionRepo
}

// NewMockSubscriptionRepo creates a new mock instance.
func NewMockSubscriptionRepo(ctrl *gomock.Controller) *MockSubscriptionRepo {
	mock := &MockSubscriptionRepo{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepo) EXPECT() *MockSubscriptionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionRepo) Create(ctx context.Context, post entity.CreateSubscriptionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionRepoMockRecorder) Create(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionRepo)(nil).Create), ctx, post)
}

// Delete mocks base method.
func (m *MockSubscriptionRepo) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriptionRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscriptionRepo)(nil).Delete), ctx, id)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionRepo) GetSubscription(ctx context.Context, id string) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, id)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionRepoMockRecorder) GetSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionRepo)(nil).GetSubscription), ctx, id)
}

// List mocks base method.
func (m *MockSubscriptionRepo) List(ctx context.Context, filter entity.ListSubscriptionFilter) ([]entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubscriptionRepoMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubscriptionRepo)(nil).List), ctx, filter)
}

// Sum mocks base method.
func (m *MockSubscriptionRepo) Sum(ctx context.Context, filter entity.ListSubscriptionFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sum indicates an expected call of Sum.
func (mr *MockSubscriptionRepoMockRecorder) Sum(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockSubscriptionRepo)(nil).Sum), ctx, filter)
}

// Update mocks base method.
func (m *MockSubscriptionRepo) Update(ctx context.Context, post entity.UpdateSubscriptionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubscriptionRepoMockRecorder) Update(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubscriptionRepo)(nil).Update), ctx, post)
}
